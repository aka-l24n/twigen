<?php

namespace l24n\Twigen\Plugin\ServerRender;

use l24n\Twigen\Application;
use l24n\Twigen\Plugin\ServerRender\Twig\FilesystemLoader;
use l24n\Twigen\ResponseEvent;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\DependencyInjection\Reference;
use Symfony\Component\EventDispatcher\EventDispatcher;
use Symfony\Component\HttpKernel\Controller\ArgumentResolver;
use Symfony\Component\HttpKernel\Controller\ArgumentResolverInterface;
use Symfony\Component\HttpKernel\Controller\ContainerControllerResolver;
use Symfony\Component\Routing\Matcher\UrlMatcher;
use Symfony\Component\Routing\Matcher\UrlMatcherInterface;
use Symfony\Component\Routing\RequestContext;
use Symfony\Component\Routing\Route;
use Symfony\Component\Routing\RouteCollection;
use Symfony\Component\String\UnicodeString;

class ServerRenderPlugin
{
    public function __construct(
        protected EventDispatcher $eventDispatcher,
        protected ContainerControllerResolver $controllerResolver,
        protected UrlMatcherInterface $urlMatcher,
        protected ArgumentResolverInterface $argumentResolver,
        #[Autowire('@page_routes')] protected PageRoutes $pageRoutes,
    ) {
        // 
    }

    public static function register(Application $application)
    {
        self::registerServices($application);
        self::setAliases($application);
    }

    public function boot()
    {
        $this->eventDispatcher->addListener('kernel.response', function (ResponseEvent $event): void {
            $request = $event->getRequest();
            $context = (new RequestContext)->fromRequest($event->getRequest());

            $matcher = new UrlMatcher($this->pageRoutes, $context);
            $event->getRequest()->attributes->add($matcher->match($event->getRequest()->getPathInfo()));
            
            $controller = $this->controllerResolver->getController($request);
            $arguments = $this->argumentResolver->getArguments($request, $controller);
            $response = call_user_func_array($controller, $arguments);
            
            $event->setResponse($response); // Replace the response with the one generated by the controller
        });

        $this->eventDispatcher->addListener('page.discover', function (PageDiscoverEvent $event): void {
            $file = $event->getFile();
            

            $extension = $file->getExtension();
            if ($extension !== 'html' && $extension !== 'twig') {
                return; // Skip non-HTML/Twig files
            }

            $frontMatter = new FrontMatter($file->getRealPath());

            $filename = (new UnicodeString($file->getFilename()))
                ->before('.')->toString(); // Remove the file extension

            $route = $filename === 'index' ? 
                $file->getRelativePath() :
                $file->getRelativePath() . '/' . $filename;
            
            $routeName = (new UnicodeString($route))
                ->replace('/', '.')
                ->toString(); // Replace slashes with dots for route name
            
            $route = new Route($route, [
                '_controller' => ['front_controller', '__invoke'],
                '_file' => [
                    'path' => $file->getRealPath(),
                    'relative_path' => $file->getRelativePath(),
                    'filename' => $file->getFilename(),
                ],
                '_front_matter' => $frontMatter->matter(),
                '_route' => $routeName,
            ]);

            $event->getPageRoutes()->add($routeName, $route);
        });

        $this->pageRoutes->discover(); 
    }

    protected function getRoutes(): RouteCollection
    {
        $routes = new RouteCollection();
        return $routes;
    }

    private static function registerServices(Application $application)
    {
        $application->register('context', RequestContext::class);
        $application->register('argument_resolver', ArgumentResolver::class);

        $application->register('controller_resolver', ContainerControllerResolver::class)
            ->setArguments([new Reference('service_container')]);

        $application->register('matcher', UrlMatcher::class)
            ->setArguments([new Reference('page_routes'), new Reference('context')]);

        $application->register('page_routes', PageRoutes::class)
            ->setArgument('$basePath', $application->getBasePath())
            ->setArgument('$eventDispatcher', new Reference('event_dispatcher'))
            ->setPublic(true);
        
        $application->register('server_render', self::class)
            ->addArgument(new Reference('event_dispatcher'))
            ->setAutowired(true)
            ->addTag('application.boot')
            ->setPublic(true);
        
        $application->register('front_controller', Controller::class)
            ->setAutowired(true)
            ->setPublic(true)
            ->addTag('controller.service_arguments');
        
        $application->register('twig.loader', FilesystemLoader::class)
            ->setArguments([$application->getBasePath() . '/pages']);

        $application->register('twig', \Twig\Environment::class)
            ->setPublic(true)
            ->setArgument('$loader', new Reference('twig.loader'));

        $application->register('plugin.serve_command', ServeCommand::class)
            ->setPublic(true)
            ->addTag('console.command');
    }

    private static function setAliases(Application $application)
    {
        $application->setAlias(ContainerControllerResolver::class, 'controller_resolver');
        $application->setAlias(UrlMatcherInterface::class, 'matcher');
        $application->setAlias(Controller::class, 'front_controller');
        $application->setAlias(ArgumentResolverInterface::class, 'argument_resolver');
    }
}
